class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        ArrayList<Integer> list = new ArrayList<>();
        
        int minr=0;
        int minc=0;
        int maxr = matrix.length-1;
        int maxc= matrix[0].length-1;
        int tne = matrix.length * matrix[0].length;
        int count=0;
        
        
        while(count<tne){
        //Top Wall
        for(int i=minr,j=minc;j<=maxc && count<tne;j++){
            list.add(matrix[i][j]);
            count++;
        }
        minr++;
        
        //Left Wall
        for(int i=minr,j=maxc;i<=maxr && count<tne;i++){
            list.add(matrix[i][j]);
            count++;
        }
        maxc--;
        
        //Bottom Wall
        for(int i=maxr,j=maxc;j>=minc && count<tne;j--){
            list.add(matrix[i][j]);
            count++;
        }
        maxr--;
        
        //right wall
        for(int i=maxr,j=minc;i>=minr && count<tne;i--){
            list.add(matrix[i][j]);
            count++;
        }
        minc++;
        }
        return list;
    }
}
