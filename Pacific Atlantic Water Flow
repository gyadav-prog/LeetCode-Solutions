class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        ArrayList<List<Integer>> res = new ArrayList<>();
        if(matrix.length==0){
            return res;
        }
        int[][] pacific = new int[matrix.length][matrix[0].length];
        int[][] atlantic = new int[matrix.length][matrix[0].length];
        
        for(int col=0;col<matrix[0].length;col++){
            dfs(matrix,0,col,Integer.MIN_VALUE,pacific);
            dfs(matrix,matrix.length-1,col,Integer.MIN_VALUE,atlantic);
        }
        
        for(int row=0;row<matrix.length;row++){
            dfs(matrix,row,0,Integer.MIN_VALUE,pacific);
            dfs(matrix,row,matrix[0].length-1,Integer.MIN_VALUE,atlantic);
        }
        
        
        
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(pacific[i][j]==1 && atlantic[i][j]==1){
                    List<Integer> sol = new ArrayList<>();
                    sol.add(i);
                    sol.add(j);
                    res.add(sol);
                }
            }
        }
        return res;
    }
    private static void dfs(int [][] matrix, int row, int col, int preVal, int[][] ocean){
        //1.Check necessary conditiopns
        if(row<0 || col<0 || row>matrix.length-1 || col>matrix[0].length-1){
            return;
        }else if(matrix[row][col] < preVal){
            return;
        }else if(ocean[row][col]==1){
            return;
        }
        
        
        //2.Process Cell
        ocean[row][col]=1;
        
        
        //3.Call DFS as needed
        dfs(matrix,row-1,col,matrix[row][col],ocean);
        dfs(matrix,row+1,col,matrix[row][col],ocean);
        dfs(matrix,row,col-1,matrix[row][col],ocean);
        dfs(matrix,row,col+1,matrix[row][col],ocean);
    }
}
